:{$PORT}

encode gzip

header {
	# Enable CORS
	Access-Control-Allow-Origin *
	Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
	Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization"
	
	# Security headers
	X-Content-Type-Options nosniff
	X-Frame-Options DENY
	X-XSS-Protection "1; mode=block"
	
	# Performance headers
	X-Process-Time {http.response.header.X-Process-Time}
}



# Handle CORS preflight requests
@cors_preflight method OPTIONS
handle @cors_preflight {
	header {
		Access-Control-Allow-Origin *
		Access-Control-Allow-Methods "GET, POST, PUT, DELETE, OPTIONS"
		Access-Control-Allow-Headers "Origin, Content-Type, Accept, Authorization"
		Access-Control-Max-Age 86400
	}
	respond 204
}

# Socket.IO routes (handle both HTTP and WebSocket for Socket.IO protocol)
@socketio_routes path /_event*
handle @socketio_routes {
	reverse_proxy localhost:{$BACKEND_PORT} {
		transport http {
			dial_timeout 10s
			response_header_timeout 60s
		}
	}
}

# Other backend routes
@backend_routes path /ping /_upload /_upload/* /stream/* /key/* /content/* /playlist.m3u8 /logo/* /health
handle @backend_routes {
	reverse_proxy localhost:{$BACKEND_PORT} {
		transport http {
			dial_timeout 10s
			response_header_timeout 60s
		}
	}
}

handle {
	root * /srv
	try_files {path} {path}/ /404.html
	file_server
}
